import http from "http";
import debug from "debug";
import { Server } from "socket.io";
import app from "../app.js";
import socketManager from "../socket/socketManager.js";

const debugLog = debug("your-app-name:server");

// Normalize port
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

// Create HTTP server
const server = http.createServer(app);

// Attach Socket.IO to server with CORS config
const io = new Server(server, {
  cors: {
    origin: process.env.CLIENT_ORIGIN || "*", // set your frontend URL here for production
    methods: ["GET", "POST"],
  },
});

// Initialize socket manager
socketManager(io);

// Log socket.io connection errors
io.engine.on("connection_error", (err) => {
  console.error("Socket.IO connection error:", err.message);
});

// Start server
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// Helpers
function normalizePort(val) {
  const port = parseInt(val, 10);
  return isNaN(port) ? val : port >= 0 ? port : false;
}

function onError(error) {
  if (error.syscall !== "listen") throw error;
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debugLog("Listening on " + bind);
}