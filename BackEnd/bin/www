import http from "http";
import debug from "debug";
import { Server } from "socket.io";
import app from "../app.js";
import socketManager from "../socket/socketio.js";

// Normalize port
const port = ((+process.env.PORT) > 0 && +process.env.PORT) || 3000
app.set("port", port);

// Create HTTP server
const server = http.createServer(app);
httpServer.on("error", onError);
httpServer.listen(port, "0.0.0.0", () => onListening());

// Attach Socket.IO to server with CORS config
const io = new Server(server, {
  cors: {
    origin: process.env.CLIENT_ORIGIN || "*", // set your frontend URL here for production
    methods: ["GET", "POST"],
  },
});

// Initialize socket manager
socketManager(io);

// Log socket.io connection errors
io.engine.on("connection_error", (err) => {
  console.error("Socket.IO connection error:", err.message);
  console.error(" Code:", err.code);
  console.error(" Message:", err.message);
  if (err.context) console.error(" Context:", err.context);
});

// Start server
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debugLog("Listening on " + bind);
  debug(`Server (and Socket.IO) listening on port ${addr.port}`);
}